diff --git a/node_modules/react-native-simple-expand/index.js b/node_modules/react-native-simple-expand/index.js
index 247e1ee..f454d1b 100644
--- a/node_modules/react-native-simple-expand/index.js
+++ b/node_modules/react-native-simple-expand/index.js
@@ -1,55 +1,68 @@
-import React, {Component, PropTypes} from 'react';
-import {
-    PanResponder,
-    View,
-    TouchableWithoutFeedback,
-    TextInput,
-    Dimensions,
-    StyleSheet,
-    Animated,
-    Easing
-} from 'react-native';
+import React, { Component, PropTypes } from 'react';
+import { View, StyleSheet, Animated, Easing } from 'react-native';
 
 const Expand = class extends Component {
-    displayName: 'Expand'
+    displayName: 'Expand';
 
-    constructor (props, context) {
+    constructor(props, context) {
         super(props, context);
-        this.state = { height: this.props.animatedValue || new Animated.Value(this.props.minHeight || 0) };
+
+        if (this.props.animatedValue) {
+            this.state = {height: this.props.animatedValue, duration: 300 };
+        } else if (this.props.expandOnStart && this.props.value) {
+            //Open by default, but dont show animation
+            this.state = {height: new Animated.Value(0), duration: 0};
+        } else {
+            this.state = {height: new Animated.Value(0), duration: 300 };
+        }
     }
 
-    componentWillReceiveProps = (newProps) => {
-        if (this.props.value !== newProps.value) {
-            newProps.value ? this.open() : this.close();
+    componentDidUpdate(prevProps) {
+        if (this.props.value !== prevProps.value) {
+            this.props.value ? this.open() : this.close();
         }
-    };
+    }
 
     close = () => {
+        if (this.props.expandOnStart && this.state.duration == 0) {
+            this.setState({duration: 300}, this.closeIt)
+        } else {
+            this.closeIt();
+        }
+    };
+
+    closeIt = () => {
         Animated.timing(this.state.height, {
             easing: Easing.inOut(Easing.ease),
-            duration: 300,
-            toValue: this.props.minHeight || 0
+            duration: this.state.duration,
+            toValue: this.props.minHeight || 0,
         }).start();
-    };
+    }
 
     open = () => {
         Animated.timing(this.state.height, {
             easing: Easing.inOut(Easing.ease),
-            duration: 270,
-            toValue: this.state.maxHeight
+            duration: this.state.duration,
+            toValue: this.props.initialHeight || this.state.maxHeight,
         }).start();
     };
 
-    _setMaxHeight (event) {
+    _setMaxHeight(event) {
         const layoutHeight = event.nativeEvent.layout.height;
-        this.setState({
-            maxHeight: Math.min((this.props.maxHeight || layoutHeight), layoutHeight)
-        });
+        this.setState(
+            {
+                maxHeight: Math.min(this.props.maxHeight || layoutHeight, layoutHeight),
+            },
+            () => {
+                this.props.value && !this.props.initialHeight && this.open();
+            },
+        );
     }
 
-    render () {
+    render() {
         var { style, children, containerStyle, style } = this.props;
         var { height } = this.state;
+
         return (
             <View style={[styles.containerStyle]}>
                 <Animated.View style={[styles.menuStyle, { height }, containerStyle]}>
@@ -66,11 +79,12 @@ Expand.propTypes = {};
 
 var styles = StyleSheet.create({
     containerStyle: {
-        overflow: 'hidden'
+        overflow: 'hidden',
     },
     menuStyle: {
-        overflow: 'scroll'
-    }
+        overflow: 'scroll',
+        backgroundColor: 'transparent',
+    },
 });
 
 module.exports = Expand;
